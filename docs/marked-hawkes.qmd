# Marked Hawkes

The conditional intensity function for the marked Hawkes model implemented in `stelfi` is given by

 $$\lambda(t; m(t)) = \mu + \alpha \Sigma_{i:\tau_i<t}m(\tau_i)\text{exp}(-\beta * (t-\tau_i)) $$ 
where $\mu$ is the background rate of the process and $m(t)$ is the temporal mark. The only difference to @eq-hawkes is now that each event has an associated mark $m(\tau_i)$ that scales the jump sizes ($\alpha$) of the self-exciting component of $\lambda(.)$.

## A simulated example

Below data are simulated using the `emhawkes` package [@emhawkes] where the marks (a vector that scale the jump sizes, starting at 0) are integer values $\in [1,4]$ for $t > 0$ and $0$ for $t = 0$ (see @sec-simulate-marked-hawkes for how to simulate using `stelfi`). The parameter values of the conditional intensity are $\mu = 1.3$, $\alpha = 0.4$, and $\beta = 1.5$. The jump sizes for the possible mark values are shown below.

```{r}
#| echo: false
require(stelfi)
kableExtra::kable_styling(
knitr::kable( data.frame(mark = c(1,2,3,4), jump = c(0.4, 0.8, 1.2, 1.6))), full_width = FALSE)
```

```{r}
#| warning: false
require(emhawkes)
mu <- 1.3; alpha <- 0.4; beta <-  1.5
fn_mark <- function( ...){
    sample(1:4, 1)
}
h1 <- new("hspec", mu = mu, alpha = alpha, beta = beta,
          rmark = fn_mark)
set.seed(123)
res <- hsim(h1, size = 100)
```

To fit the model in `stelfi` the `fit_hawkes()` function is used and the additional optional argument `marks` supplied.


```{r}
sv <- c(mu = 1.3, alpha = 0.4, beta = 1.5)
fit <- fit_hawkes(times = res$arrival, parameters = sv, marks = res$mark)
get_coefs(fit)
```

Note the estimated coefficient $\alpha$ from `stelfi` equates to $\frac{\alpha}{\text{mark}}$ from `emhawkes`. 

```{r}
#| warning: false
## benchmark emhawkes
emhawkes::hfit(h1, inter_arrival = res$inter_arrival, mark = res$mark) |>
  summary()
``` 

The fitted model and diagnostic plots are plotted using `show_hawkes()` and `show_hawkes_GOF()`.

```{r, echo = TRUE,fig.height = 7,fig.width = 9}
#| warning: false
show_hawkes(fit)
```


```{r, echo = TRUE,fig.height = 7,fig.width = 9}
show_hawkes_GOF(fit)
```

## Simulating a marked process {#sec-simulate-marked-hawkes}

TODO

## The negative log-likelihood {#sec-hawkesnll}

Below the negative log-likelihood of a univariate marked Hawkes process used by `stelfi` is written using `R`/`RTMB` [@RTMB] syntax. The function below returns the negative log-likelihood of a univariate marked Hawkes process, `RTMB` is used to automatically calculate the gradient and then the function is minimised via `nlminb()`. [See here for and overview](https://cran.r-project.org/web/packages/RTMB/vignettes/RTMB-introduction.html) of `RTMB`. This section is for demonstration only, feel free to modify the function as desired. Note that this can be used to fit an unmarked model by setting the vector of marks to be $\boldsymbol{1}$.

```{r}
library(RTMB)
univariate_marked_hawkes <- function(params){
    getAll(data, params)
    mu <- exp(log_mu)
    beta <- exp(log_beta)
    alpha <- exp(logit_abratio) / (1 + exp(logit_abratio)) * (beta/mean(marks))
    n <- length(times)
    last <- times[n]
    nll <- 0
    A <- advector(numeric(n)) 
    for(i in 2:n){
        A[i] <- sum(exp(-beta * (times[i] - times[i - 1])) * (marks[i - 1] + A[i - 1]))
    }
    term_3vec <- log(mu + alpha * A)
    nll <- (mu * last) + ((alpha/beta) * (sum(marks) - marks[n] - A[n])) - sum(term_3vec)
    ADREPORT(mu)
    ADREPORT(alpha)
    ADREPORT(beta)
    return(nll)
}

data <- list(times = res$arrival, marks = res$mark)
params <- list(log_mu = log(1.3), logit_abratio = 0.6, log_beta = log(1.5))
obj <- MakeADFun(univariate_marked_hawkes, params, silent = TRUE)
opt <- nlminb(obj$par, obj$fn, obj$gr)
summary(sdreport(obj), "report")

```



